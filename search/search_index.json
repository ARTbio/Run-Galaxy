{
    "docs": [
        {
            "location": "/", 
            "text": "Run-Galaxy\n\n\nRun Galaxy training course\n\n\nGoogle Cloud Engine\n\n\n\n\nPrerequisite: a Google account / Gmail account\n\n\nConnect to \nGoogle Cloud Engine\n\n\nClick on \nEssai Gratuit\n / \nFree Trial\n\n\nEnter your Gmail mail address and password\n\n\nReview conditions and accept\n\n\nInscription Form:\n\n\nEntreprise\n / \nCompany\n : put anything like \"Perso\" or \"foo/bar\"\n\n\nAjouter une carte de paiement\n / \nAdd credit Card\n or optionally \nAjouter un compte bancaire\n / \nBank account\n\n\nYou are in for a free trial of 12 months / 300 $\n\n\ngo to your \nGoogle Cloud Console\n to control your spin off / control your Virtual Machines", 
            "title": "Prerequites"
        }, 
        {
            "location": "/#run-galaxy", 
            "text": "", 
            "title": "Run-Galaxy"
        }, 
        {
            "location": "/#run-galaxy-training-course", 
            "text": "", 
            "title": "Run Galaxy training course"
        }, 
        {
            "location": "/#google-cloud-engine", 
            "text": "Prerequisite: a Google account / Gmail account  Connect to  Google Cloud Engine  Click on  Essai Gratuit  /  Free Trial  Enter your Gmail mail address and password  Review conditions and accept  Inscription Form:  Entreprise  /  Company  : put anything like \"Perso\" or \"foo/bar\"  Ajouter une carte de paiement  /  Add credit Card  or optionally  Ajouter un compte bancaire  /  Bank account  You are in for a free trial of 12 months / 300 $  go to your  Google Cloud Console  to control your spin off / control your Virtual Machines", 
            "title": "Google Cloud Engine"
        }, 
        {
            "location": "/spin_off_VM/", 
            "text": "Spin off a virtual Machine\n\n\n\n\nGo to the Google Cloud Dashboard and select \"Compute Engine\" on the left hand menu bar\n\n\n\n\nSelect the submenu \"Instances de VM\"\n\n\n\n\n\n\n\n\nClick on the top bar menu the \"CREER UNE INSTANCE\" panel\n\n\n\n\nPut name \"bare-galaxy\"\n\n\nChoose a Zone (suggestion: \neurope-west1-c\n)\n\n\nType de machine: choose 2 vCPU with 7.5 Memory\n\n\nDisque de D\u00e9marrage: Click on \nModifier\n\n\nSelect \nUbuntu 14.04 LTS\n\n\nAt the bottom of the form, put 100 Go for the Disk Size (Taille)\n\n\nLeave the selection \nDisque persistant standard\n / \nStandard persistant drive\n\n\nClick \nSelect\n / \nS\u00e9lectionner\n\n\n\n\n\n\nClick \nAuthorize HTTP traffic\n / \nAutoriser le traffic HTTP\n\n\n\n\nClick \nCr\u00e9er\n / \nCreate\n\n\nConnect to the started virtual Machine\n\n\nAfter a few seconds, the VM turns on \"green\" and an \nssh\n menu becomes selectable\n\n\n\n\n\n\n\n\nRoll down this \nssh\n menu and select the first option \nOuvrir dans la fen\u00eatre du navigateur\n\n\n\n\n\n\n\n\nA shell console pop out and you should now be ready to control your VM with linux command lines\n\n\n\n\n\n\n\n\n\n\nTry to enter the drosofff@bare-galaxy:~$ \nsudo -i\n command and hit the return key.\n\n\n\n\nThe unix prompt become \nroot@bare-galaxy:~#\n, you are mastering your VM as root administrator !\n\n\n[Optional] Here, if you do not have to work with the VM, you can turn off the VM and even trash it:\n\n\nin one shot, go back to your VM control panel in the web browser, ensure that the running VM is checked, and press the Trash button in the top menu.\n\n\nConfirm that you want to trash the VM and loose everything.\n\n\nafter a few seconds the VM disappears from the Dashboard.", 
            "title": "Spin off a Virtual Machine"
        }, 
        {
            "location": "/spin_off_VM/#spin-off-a-virtual-machine", 
            "text": "Go to the Google Cloud Dashboard and select \"Compute Engine\" on the left hand menu bar   Select the submenu \"Instances de VM\"     Click on the top bar menu the \"CREER UNE INSTANCE\" panel   Put name \"bare-galaxy\"  Choose a Zone (suggestion:  europe-west1-c )  Type de machine: choose 2 vCPU with 7.5 Memory  Disque de D\u00e9marrage: Click on  Modifier  Select  Ubuntu 14.04 LTS  At the bottom of the form, put 100 Go for the Disk Size (Taille)  Leave the selection  Disque persistant standard  /  Standard persistant drive  Click  Select  /  S\u00e9lectionner    Click  Authorize HTTP traffic  /  Autoriser le traffic HTTP   Click  Cr\u00e9er  /  Create", 
            "title": "Spin off a virtual Machine"
        }, 
        {
            "location": "/spin_off_VM/#connect-to-the-started-virtual-machine", 
            "text": "After a few seconds, the VM turns on \"green\" and an  ssh  menu becomes selectable     Roll down this  ssh  menu and select the first option  Ouvrir dans la fen\u00eatre du navigateur     A shell console pop out and you should now be ready to control your VM with linux command lines      Try to enter the drosofff@bare-galaxy:~$  sudo -i  command and hit the return key.   The unix prompt become  root@bare-galaxy:~# , you are mastering your VM as root administrator !  [Optional] Here, if you do not have to work with the VM, you can turn off the VM and even trash it:  in one shot, go back to your VM control panel in the web browser, ensure that the running VM is checked, and press the Trash button in the top menu.  Confirm that you want to trash the VM and loose everything.  after a few seconds the VM disappears from the Dashboard.", 
            "title": "Connect to the started virtual Machine"
        }, 
        {
            "location": "/bare-galaxy/", 
            "text": "Install a minimal galaxy server with git\n\n\nSpin off a virtual Machine \nbare-galaxy\n\n\nYou may have already done this in the \nprevious section\n. If not, refer to this section\nWe are going to use a GCE VM \n- under Ubuntu 14.04\n- 2 processors\n- 7.5 Gb RAM\n- a 100 Gb Volume (more than enough)\n\n\nConnect to the VM as explained in \nprevious section\n using the ssh web console\n\n\nInstallation of dependencies\n\n\nTo install Galaxy, we only need the \ngit\n program installed and a limited number of command line.\nWe are going to execute these instruction as the \nroot\n unix user. This is easier because installation\nof new programs as well as manipulations of network interfaces is generally permitted only\nto users with administration rights.\n\n\nSo let's do this step by step:\n\n\n1. \nsudo -i\n\n\nThis command open a new \"shell\" where you are root. You can check this by typing \npwd\n that\nshould return \n/root/\n, meaning that you are now working in the directory of the \nroot\n user.\n\n\n2. \napt-get install -y git\n\n\nThis command install the \ngit program\n. The \n-y\n option specifies to the \napt-get\n package\ninstaller that no confirmation is needed for this command.\n\n\n3. \ngit clone https://github.com/galaxyproject/galaxy.git\n\n\nThis command says to \ngit\n to \nclone\n the code repository located at \nhttps://github.com/galaxyproject/galaxy.git\n.\nYou may try to visualize this URL \nhttps://github.com/galaxyproject/galaxy.git\n\nin your web browser.\n\n\n4. \ncd galaxy\n\n\nThis command shift you in the \ngalaxy\n directory that was created by git\n\n\n5. \ncp config/galaxy.ini.sample config/galaxy.ini\n\n\nThis command makes a copie of the \ngalaxy.ini.sample\n file into \ngalaxy.ini\n - in the\ndirectory \nconfig\n that is in the \ngalaxy\n directory.\n\n\n6. \nnano config/galaxy.ini\n\n\nWith this command, we are going to edit some important settings that are required to run our galaxy instance.\n\n\n\n\nFind the line \n#port = 8080\n and edit it to \nport = 80\n\n\n\n\nBy doing this, we uncomment the line that becomes active to specify that the port \nlisten\n by the\nintegrated galaxy web server will be the port \n80\n\n\n\n\nFind the line \n#host = 127.0.0.1\n and edit it to \nhost = 0.0.0.0\n.\n\n\n\n\nBy doing this, we uncomment the line that specifies that the galaxy web server will listen the port \n80\n\nof \nall available\n network interfaces: in practical, you will be able to connect to you GCE VM from Pasteur or\nanywhere else in the world.\n\n\n\n\nsave your edits by pressing the key combination \nCtrl\n+\no\n\n\nquit nano by pressing the key combination \nCtrl\n+\nx\n\n\n\n\n7. Ready for the Big Bang ?\n\n\nThen type \nsh run.sh\n and press the \nenter\n key !\n\n\nYou should see an abundant log scrolling down. Don't worry !\n- All Galaxy dependencies required for the Galaxy server instance are being downloaded and installed\n- The Galaxy computing environment is automatically set up\n- The Galaxy database is automatically upgraded to the latest structure\n- Various tools are upgraded.\n\n\nAfter 2 minute or so, you should see the log freezing with\n\n\nStarting server in PID 3192.\nserving on 0.0.0.0:80 view at http://127.0.0.1:80\n\n\n\n\n8. Connect to your living Galaxy instance\n\n\nIf so, this is all good, and you can now access to you Galaxy instance in a you web browser window:\n\n\nGo back to your Google Cloud Engine control panel. Find the \nExternal IP address\n / \nAdresse IP externe\n\nin the 7th column of the Dashbord (to the left of the ssh menu that you used before. And just click on the hyperlink.\n\n\n9. Optional : become admin of your Galaxy server instance\n\n\n\n\nstop your server by \nCtrl\n + \nc\n in the console\n\n\nThen type \nnano /home/galaxy/galaxy/config/galaxy.ini\n\n\nFind \nadmin_users =\n. For that you may use the search function of nano: \nCtrl\n + \nw\n, type \nadmin_users\n and press the \nenter\n key.\n\n\n\n\nEdit by inserting your email address, which will be the admin login:\n    \nadmin_users = moi@ego.org\n (note that you are not obliged to put a valid email address)\n\n\nYou can also put multiple users authorized for administration\n\n\nadmin_users = moi@ego.org,monpote@sympa.org,galaxy_admin@galaxyproject.org\n\n\n\n\n\n\nRestart the server by \nsh run.sh", 
            "title": "Install a minimal standalone galaxy server"
        }, 
        {
            "location": "/bare-galaxy/#install-a-minimal-galaxy-server-with-git", 
            "text": "", 
            "title": "Install a minimal galaxy server with git"
        }, 
        {
            "location": "/bare-galaxy/#spin-off-a-virtual-machine-bare-galaxy", 
            "text": "You may have already done this in the  previous section . If not, refer to this section\nWe are going to use a GCE VM \n- under Ubuntu 14.04\n- 2 processors\n- 7.5 Gb RAM\n- a 100 Gb Volume (more than enough)", 
            "title": "Spin off a virtual Machine bare-galaxy"
        }, 
        {
            "location": "/bare-galaxy/#connect-to-the-vm-as-explained-in-previous-section-using-the-ssh-web-console", 
            "text": "", 
            "title": "Connect to the VM as explained in previous section using the ssh web console"
        }, 
        {
            "location": "/bare-galaxy/#installation-of-dependencies", 
            "text": "To install Galaxy, we only need the  git  program installed and a limited number of command line.\nWe are going to execute these instruction as the  root  unix user. This is easier because installation\nof new programs as well as manipulations of network interfaces is generally permitted only\nto users with administration rights.  So let's do this step by step:", 
            "title": "Installation of dependencies"
        }, 
        {
            "location": "/bare-galaxy/#1-sudo-i", 
            "text": "This command open a new \"shell\" where you are root. You can check this by typing  pwd  that\nshould return  /root/ , meaning that you are now working in the directory of the  root  user.", 
            "title": "1. sudo -i"
        }, 
        {
            "location": "/bare-galaxy/#2-apt-get-install-y-git", 
            "text": "This command install the  git program . The  -y  option specifies to the  apt-get  package\ninstaller that no confirmation is needed for this command.", 
            "title": "2. apt-get install -y git"
        }, 
        {
            "location": "/bare-galaxy/#3-git-clone-httpsgithubcomgalaxyprojectgalaxygit", 
            "text": "This command says to  git  to  clone  the code repository located at  https://github.com/galaxyproject/galaxy.git .\nYou may try to visualize this URL  https://github.com/galaxyproject/galaxy.git \nin your web browser.", 
            "title": "3. git clone https://github.com/galaxyproject/galaxy.git"
        }, 
        {
            "location": "/bare-galaxy/#4-cd-galaxy", 
            "text": "This command shift you in the  galaxy  directory that was created by git", 
            "title": "4. cd galaxy"
        }, 
        {
            "location": "/bare-galaxy/#5-cp-configgalaxyinisample-configgalaxyini", 
            "text": "This command makes a copie of the  galaxy.ini.sample  file into  galaxy.ini  - in the\ndirectory  config  that is in the  galaxy  directory.", 
            "title": "5. cp config/galaxy.ini.sample config/galaxy.ini"
        }, 
        {
            "location": "/bare-galaxy/#6-nano-configgalaxyini", 
            "text": "With this command, we are going to edit some important settings that are required to run our galaxy instance.   Find the line  #port = 8080  and edit it to  port = 80   By doing this, we uncomment the line that becomes active to specify that the port  listen  by the\nintegrated galaxy web server will be the port  80   Find the line  #host = 127.0.0.1  and edit it to  host = 0.0.0.0 .   By doing this, we uncomment the line that specifies that the galaxy web server will listen the port  80 \nof  all available  network interfaces: in practical, you will be able to connect to you GCE VM from Pasteur or\nanywhere else in the world.   save your edits by pressing the key combination  Ctrl + o  quit nano by pressing the key combination  Ctrl + x", 
            "title": "6. nano config/galaxy.ini"
        }, 
        {
            "location": "/bare-galaxy/#7-ready-for-the-big-bang", 
            "text": "Then type  sh run.sh  and press the  enter  key !  You should see an abundant log scrolling down. Don't worry !\n- All Galaxy dependencies required for the Galaxy server instance are being downloaded and installed\n- The Galaxy computing environment is automatically set up\n- The Galaxy database is automatically upgraded to the latest structure\n- Various tools are upgraded.  After 2 minute or so, you should see the log freezing with  Starting server in PID 3192.\nserving on 0.0.0.0:80 view at http://127.0.0.1:80", 
            "title": "7. Ready for the Big Bang ?"
        }, 
        {
            "location": "/bare-galaxy/#8-connect-to-your-living-galaxy-instance", 
            "text": "If so, this is all good, and you can now access to you Galaxy instance in a you web browser window:  Go back to your Google Cloud Engine control panel. Find the  External IP address  /  Adresse IP externe \nin the 7th column of the Dashbord (to the left of the ssh menu that you used before. And just click on the hyperlink.", 
            "title": "8. Connect to your living Galaxy instance"
        }, 
        {
            "location": "/bare-galaxy/#9-optional-become-admin-of-your-galaxy-server-instance", 
            "text": "stop your server by  Ctrl  +  c  in the console  Then type  nano /home/galaxy/galaxy/config/galaxy.ini  Find  admin_users = . For that you may use the search function of nano:  Ctrl  +  w , type  admin_users  and press the  enter  key.   Edit by inserting your email address, which will be the admin login:\n     admin_users = moi@ego.org  (note that you are not obliged to put a valid email address)  You can also put multiple users authorized for administration  admin_users = moi@ego.org,monpote@sympa.org,galaxy_admin@galaxyproject.org    Restart the server by  sh run.sh", 
            "title": "9. Optional : become admin of your Galaxy server instance"
        }, 
        {
            "location": "/GalaxyKickStart/", 
            "text": "Installation of a Galaxy server with Ansible and the GalaxyKickStart playbook\n\n\nWhat is Ansible ?\n\n\n\n\nAnsible is an automation engine that automates configuration management and application\ndeployment.\n\n\nAnsible reads instructions (Tasks) from a playbook and performs the indicated tasks on\ntarget machines (Hosts), through an ssh connection.\n\n\nThere is no magics: everything an \"administrator\" can do using command lines of a linux OS,\ncan be automated with ansible that \"wraps\" these command lines.\nThe power of Ansible (and similar orchestration software, ie Puppet, Chief, etc.) comes\nfrom the abstraction of complex suite of commands in the Ansible syntax.\nMoreover, automation allows to reproduce exactly the desired configuration.\nFinally, Ansible is \nidempotent\n: whatever the initial configuration, it brings the target\nto the exact same final state. This is useful to repair a broken configuration.\n\n\nAnsible playbook - GalaxyKickStart\n\n\nThe Ansible \"language\" (Striclty speaking, Ansible language is \nnot\n a programming language)\nis structured. Thus a playbook is not necessarily a single flat file. Multiple tasks can be gathered in a file, a \"role\" is the execution of a set of tasks, and a playbook can execute multiple roles.\n\n\nGalaxyKickStart is an Ansible playbook that will\n\n\n\n\ninstall basic dependencies needed for Galaxy\n\n\nCreate and manage all the linux users involved in the deployment of Galaxy\n\n\nInstall and configure the services required for Galaxy:\n\n\npostgresql (database engine)\n\n\nnginx (web server)\n\n\ndocker (containers)\n\n\nproftpd (ftp server)\n\n\nslurm (job manager)\n\n\nsupervisor (service manager)\n\n\nConfigure Galaxy for using these services\n\n\nInstall tools and workflows using the bioblend API.\n\n\n\n\nThe code of the GalaxyKickStart playbook is freely available at the ARTbio GitHub\nRepository \nhttps://github.com/ARTbio/GalaxyKickStart\n.\n\n\nDeployment\n\n\n\n\nstart a GCE VM `2 procs, 7.5Gb RAM, Ubuntu 14.04, 100 Go disk, http enabled\n\n\nconnect to you VM using the Google ssh console\n\n\nstart an interactive session as root using the command \nsudo -i\n\n\ndownload the script \nrun_galaxykickstart.sh\n using the command `wget https://raw.githubusercontent.com/ARTbio/Run-Galaxy/master/deployment_scripts/run_galaxykickstart.sh\n\n\nrun the script using the command \nsh run_galaxykickstart.sh\n\n\n\n\nthe run_galaxykickstart.sh script explained\n\n\nNB: in the following code, numbers in line heads should be removed to run the script.\n\n\n1  #!/usr/bin/env bash\n2  set -e\n3  apt-get install -y python-pip python-dev python-setuptools git htop\n4  echo \nUpgrading pip to v 1.9\\n\n\n5  pip install -U pip\n6  pip --version\n7  /usr/local/bin/pip install ansible==2.2\n8  ansible --version\n9  git clone https://github.com/ARTbio/GalaxyKickStart.git\n10 cd GalaxyKickStart/\n11 ansible-galaxy install -r requirements_roles.yml -p roles/ -f\n12 echo \n\\nEditing group_vars/all\\n\n\n13 sed -i -e 's/galaxy_manage_trackster: true/galaxy_manage_trackster: false/' group_vars/all\n14 ansible-playbook -i inventory_files/galaxy-kickstart galaxy.yml\n15 echo \n\\nSleeping 15 sec before restarting Galaxy server\\n\n\n16 echo \nzzzz zzzz...\n\n17 sleep 15\n18 supervisorctl restart galaxy:\n\n\n\n\n\n\nThe shebang line. Says that it is a script code and that the interpreter to execute the\ncode is bash and can be found in the /usr/bin/env environment\n\n\nset -e says to the bash interpreter to exit the run at first error (to avoid catastrophes)\n\n\ninstall \npython-pip\n, \npython-dev\n, \npython-setuptools\n (these 3 packages are required to\ninstall pip), \ngit\n (to clone and manage GitHub repositories) and \nhtop\n (a monitoring tool)\nusing the package installer \napt-get\n\n\nIs just a command to inform the user about run state. This will prompt\n\"Upgrading pip to v 1.9\" in the console\n\n\ndoes what is stated before ! : this is the command to upgrade the pip program that was\ninstalled with installation of \npython-pip\n, \npython-dev\n and \npython-setuptools\n.\n\npip\n is a recursive acronym that can stand for either \"Pip Installs Packages\" or\n\"Pip Installs Python\".\n\n\nwill prompt the version of pip in the console\n\n\ninstall \nansible\n, version 2.2, using \npip\n !\n\n\nwill prompt the version of ansible in the console\n\n\nclone the GalaxyKickStart Repository available at https://github.com/ARTbio/GalaxyKickStart.git,\ncreating locally the \nGalaxyKickStart\n folder.\n\n\nChange directory, ie goes to /root/GalaxyKickStart\n\n\nsays to ansible to install additional roles (collection of files to control ansible)\nwhich are not the the GalaxyKickStart repository but whose address is stated in the file\n\nrequirements_roles.yml\n. These roles will be installed in the subdirectory\n\n/root/GalaxyKickStart/roles/\n. NB: \nansible-galaxy\n has \nnothing\n to do with Galaxy,\nthe name of this ansible command is serendipitous.\n\n\nwarns about the next command\n\n\nThis sed command will automatically search and replace the string\n\ngalaxy_manage_trackster: true\n with the string \ngalaxy_manage_trackster: false\n\nin the ansible configuration file \ngroups/all\n.\n\n\ntriggers the play of the playbook \ngalaxy.yml\n by ansible. The target host of the playbook\nis defined in the file \ninventory_files/galaxy-kickstart\n, as well as how ansible will interact with the target.\nHere, we play the playbook on the same computer (localhost).\n\n\nPrompt the effect of the command 17.\n\n\nPrompt the effect of the command 17.\n\n\nsleep for 15 seconds. This is to let the Galaxy server starting quietly.\n\n\nuse supervisor to restart the galaxy server: this is to load the more recent configuration\nfiles that may have been modified by the playbook \nafter\n the Galaxy server started.", 
            "title": "Install a Galaxy server with Ansible and GalaxyKickStart"
        }, 
        {
            "location": "/GalaxyKickStart/#installation-of-a-galaxy-server-with-ansible-and-the-galaxykickstart-playbook", 
            "text": "", 
            "title": "Installation of a Galaxy server with Ansible and the GalaxyKickStart playbook"
        }, 
        {
            "location": "/GalaxyKickStart/#what-is-ansible", 
            "text": "Ansible is an automation engine that automates configuration management and application\ndeployment.  Ansible reads instructions (Tasks) from a playbook and performs the indicated tasks on\ntarget machines (Hosts), through an ssh connection.  There is no magics: everything an \"administrator\" can do using command lines of a linux OS,\ncan be automated with ansible that \"wraps\" these command lines.\nThe power of Ansible (and similar orchestration software, ie Puppet, Chief, etc.) comes\nfrom the abstraction of complex suite of commands in the Ansible syntax.\nMoreover, automation allows to reproduce exactly the desired configuration.\nFinally, Ansible is  idempotent : whatever the initial configuration, it brings the target\nto the exact same final state. This is useful to repair a broken configuration.", 
            "title": "What is Ansible ?"
        }, 
        {
            "location": "/GalaxyKickStart/#ansible-playbook-galaxykickstart", 
            "text": "The Ansible \"language\" (Striclty speaking, Ansible language is  not  a programming language)\nis structured. Thus a playbook is not necessarily a single flat file. Multiple tasks can be gathered in a file, a \"role\" is the execution of a set of tasks, and a playbook can execute multiple roles.  GalaxyKickStart is an Ansible playbook that will   install basic dependencies needed for Galaxy  Create and manage all the linux users involved in the deployment of Galaxy  Install and configure the services required for Galaxy:  postgresql (database engine)  nginx (web server)  docker (containers)  proftpd (ftp server)  slurm (job manager)  supervisor (service manager)  Configure Galaxy for using these services  Install tools and workflows using the bioblend API.   The code of the GalaxyKickStart playbook is freely available at the ARTbio GitHub\nRepository  https://github.com/ARTbio/GalaxyKickStart .", 
            "title": "Ansible playbook - GalaxyKickStart"
        }, 
        {
            "location": "/GalaxyKickStart/#deployment", 
            "text": "start a GCE VM `2 procs, 7.5Gb RAM, Ubuntu 14.04, 100 Go disk, http enabled  connect to you VM using the Google ssh console  start an interactive session as root using the command  sudo -i  download the script  run_galaxykickstart.sh  using the command `wget https://raw.githubusercontent.com/ARTbio/Run-Galaxy/master/deployment_scripts/run_galaxykickstart.sh  run the script using the command  sh run_galaxykickstart.sh", 
            "title": "Deployment"
        }, 
        {
            "location": "/GalaxyKickStart/#the-run_galaxykickstartsh-script-explained", 
            "text": "NB: in the following code, numbers in line heads should be removed to run the script.  1  #!/usr/bin/env bash\n2  set -e\n3  apt-get install -y python-pip python-dev python-setuptools git htop\n4  echo  Upgrading pip to v 1.9\\n \n5  pip install -U pip\n6  pip --version\n7  /usr/local/bin/pip install ansible==2.2\n8  ansible --version\n9  git clone https://github.com/ARTbio/GalaxyKickStart.git\n10 cd GalaxyKickStart/\n11 ansible-galaxy install -r requirements_roles.yml -p roles/ -f\n12 echo  \\nEditing group_vars/all\\n \n13 sed -i -e 's/galaxy_manage_trackster: true/galaxy_manage_trackster: false/' group_vars/all\n14 ansible-playbook -i inventory_files/galaxy-kickstart galaxy.yml\n15 echo  \\nSleeping 15 sec before restarting Galaxy server\\n \n16 echo  zzzz zzzz... \n17 sleep 15\n18 supervisorctl restart galaxy:   The shebang line. Says that it is a script code and that the interpreter to execute the\ncode is bash and can be found in the /usr/bin/env environment  set -e says to the bash interpreter to exit the run at first error (to avoid catastrophes)  install  python-pip ,  python-dev ,  python-setuptools  (these 3 packages are required to\ninstall pip),  git  (to clone and manage GitHub repositories) and  htop  (a monitoring tool)\nusing the package installer  apt-get  Is just a command to inform the user about run state. This will prompt\n\"Upgrading pip to v 1.9\" in the console  does what is stated before ! : this is the command to upgrade the pip program that was\ninstalled with installation of  python-pip ,  python-dev  and  python-setuptools . pip  is a recursive acronym that can stand for either \"Pip Installs Packages\" or\n\"Pip Installs Python\".  will prompt the version of pip in the console  install  ansible , version 2.2, using  pip  !  will prompt the version of ansible in the console  clone the GalaxyKickStart Repository available at https://github.com/ARTbio/GalaxyKickStart.git,\ncreating locally the  GalaxyKickStart  folder.  Change directory, ie goes to /root/GalaxyKickStart  says to ansible to install additional roles (collection of files to control ansible)\nwhich are not the the GalaxyKickStart repository but whose address is stated in the file requirements_roles.yml . These roles will be installed in the subdirectory /root/GalaxyKickStart/roles/ . NB:  ansible-galaxy  has  nothing  to do with Galaxy,\nthe name of this ansible command is serendipitous.  warns about the next command  This sed command will automatically search and replace the string galaxy_manage_trackster: true  with the string  galaxy_manage_trackster: false \nin the ansible configuration file  groups/all .  triggers the play of the playbook  galaxy.yml  by ansible. The target host of the playbook\nis defined in the file  inventory_files/galaxy-kickstart , as well as how ansible will interact with the target.\nHere, we play the playbook on the same computer (localhost).  Prompt the effect of the command 17.  Prompt the effect of the command 17.  sleep for 15 seconds. This is to let the Galaxy server starting quietly.  use supervisor to restart the galaxy server: this is to load the more recent configuration\nfiles that may have been modified by the playbook  after  the Galaxy server started.", 
            "title": "the run_galaxykickstart.sh script explained"
        }, 
        {
            "location": "/Docker_GalaxyKickStart/", 
            "text": "Installation of a Galaxy server with Docker\n\n\nWhat is Docker ?\n\n\n\n\nVirtual machines\n\n\nVirtual machines (VMs) are an abstraction of physical hardware turning one server into\nmany servers. The hypervisor allows multiple VMs to run on a single machine.\nEach VM includes a full copy of an operating system, one or more apps, necessary binaries\nand libraries - taking up tens of GBs. VMs can also be slow to boot.\n\n\nContainers\n\n\nContainers are an abstraction at the app layer that packages code and dependencies\ntogether. Multiple containers can run on the same machine and share the OS kernel with\nother containers, each running as isolated processes in user space. Containers take up\nless space than VMs (container images are typically tens of MBs in size), and start\nalmost instantly.\n\n\nGalaxyKickStart Docker \nContainer\n\n\nInstead of using the GalaxyKickStart playbook in a VM, the playbook can be used to build\na Docker container image that will be an almost exact mirror of the GalaxyKickStart VM\nyou have just built.\n\n\nYou are not going to do that today (although you should be able to do it by reading the instructions).\n\n\nInstead, you are going to\n\n\n\n\nInstall the \ndocker\n system\n\n\npull the GalaxyKickStart docker container that is deposited in the \nDocker Hub\n\n\nrun this docker container and connect to the deployed GalaxyKickStart server instance", 
            "title": "Install a Galaxy server with Docker"
        }, 
        {
            "location": "/Docker_GalaxyKickStart/#installation-of-a-galaxy-server-with-docker", 
            "text": "", 
            "title": "Installation of a Galaxy server with Docker"
        }, 
        {
            "location": "/Docker_GalaxyKickStart/#what-is-docker", 
            "text": "", 
            "title": "What is Docker ?"
        }, 
        {
            "location": "/Docker_GalaxyKickStart/#virtual-machines", 
            "text": "Virtual machines (VMs) are an abstraction of physical hardware turning one server into\nmany servers. The hypervisor allows multiple VMs to run on a single machine.\nEach VM includes a full copy of an operating system, one or more apps, necessary binaries\nand libraries - taking up tens of GBs. VMs can also be slow to boot.", 
            "title": "Virtual machines"
        }, 
        {
            "location": "/Docker_GalaxyKickStart/#containers", 
            "text": "Containers are an abstraction at the app layer that packages code and dependencies\ntogether. Multiple containers can run on the same machine and share the OS kernel with\nother containers, each running as isolated processes in user space. Containers take up\nless space than VMs (container images are typically tens of MBs in size), and start\nalmost instantly.", 
            "title": "Containers"
        }, 
        {
            "location": "/Docker_GalaxyKickStart/#galaxykickstart-docker-container", 
            "text": "Instead of using the GalaxyKickStart playbook in a VM, the playbook can be used to build\na Docker container image that will be an almost exact mirror of the GalaxyKickStart VM\nyou have just built.  You are not going to do that today (although you should be able to do it by reading the instructions).  Instead, you are going to   Install the  docker  system  pull the GalaxyKickStart docker container that is deposited in the  Docker Hub  run this docker container and connect to the deployed GalaxyKickStart server instance", 
            "title": "GalaxyKickStart Docker Container"
        }, 
        {
            "location": "/GCE_TP_Galaxy/", 
            "text": "Spin off a virtual Machine\n\n\n1. Go to the Google Cloud Dashboard and select \"Compute Engine\" on the left hand menu bar\n\n\n2. Select the submenu \"Instances de VM\"\n\n\n\n\n3. Click on the top bar menu the \"CREER UNE INSTANCE\" panel\n\n\n\n\n4. Put name \nmy-galaxy-server\n, Zone \neurope-west1-b (or c)\n, Type de machine \n8 vCPU\n + \n30 Go\n de m\u00e9moire.\n\n\n\n\n5. Disque de D\u00e9marrage: Click on \nModifier\n\n\n\n\n6. Select the top menu \nimages personnalis\u00e9es\n (\ncustom images\n)\n\n\n\n\n7. Click on the rolling menu \nAfficher les images de\n and select the \nMy Project - main-sunset-133416\n\n\n\n\nWhat is important here is the identifier \nmain-sunset-133416\n\n\n8. Check the button to select \ngalaxy-image-pasteur\n\n\n\n\n9. At the bottom of the same form, choose \n100 Go\n for the Disk Size (Taille). Note that this size should be already selected.\n\n\n\n\nClick the \nS\u00e9lectionner\n button to leave the selection \nDisque persistant standard\n / \nStandard persistant drive\n\n\n10. Back to the main form, Click \nAuthorize HTTP traffic\n / \nAutoriser le traffic HTTP\n\n\n\n\n11. Click \nCr\u00e9er\n / \nCreate\n\n\n12. After ~1 minute or so, the VM turns on \"green\" and an \nssh\n menu becomes selectable\n\n\n\n\n13. Click on the http link provided in the \nAdress IP externe\n column\n\n\nYou should now be able to access to your own Galaxy server instance, but not that this\nphase can take an additional minute or so, this is the time to start all the galaxy services\nin the new server instance.\n\n\n14. Immediately Log in to your server as the administrator\n\n\n\n\nAnd log in with \nadmin@galaxy.org\n : \nadmin\n\n\n\n\nYOU ARE READY TO USE GALAXY !", 
            "title": "Annex 1: Run your personal TP Galaxy server"
        }, 
        {
            "location": "/GCE_TP_Galaxy/#spin-off-a-virtual-machine", 
            "text": "", 
            "title": "Spin off a virtual Machine"
        }, 
        {
            "location": "/GCE_TP_Galaxy/#1-go-to-the-google-cloud-dashboard-and-select-compute-engine-on-the-left-hand-menu-bar", 
            "text": "", 
            "title": "1. Go to the Google Cloud Dashboard and select \"Compute Engine\" on the left hand menu bar"
        }, 
        {
            "location": "/GCE_TP_Galaxy/#2-select-the-submenu-instances-de-vm", 
            "text": "", 
            "title": "2. Select the submenu \"Instances de VM\""
        }, 
        {
            "location": "/GCE_TP_Galaxy/#3-click-on-the-top-bar-menu-the-creer-une-instance-panel", 
            "text": "", 
            "title": "3. Click on the top bar menu the \"CREER UNE INSTANCE\" panel"
        }, 
        {
            "location": "/GCE_TP_Galaxy/#4-put-name-my-galaxy-server-zone-europe-west1-b-or-c-type-de-machine-8-vcpu-30-go-de-memoire", 
            "text": "", 
            "title": "4. Put name my-galaxy-server, Zone europe-west1-b (or c), Type de machine 8 vCPU + 30 Go de m\u00e9moire."
        }, 
        {
            "location": "/GCE_TP_Galaxy/#5-disque-de-demarrage-click-on-modifier", 
            "text": "", 
            "title": "5. Disque de D\u00e9marrage: Click on Modifier"
        }, 
        {
            "location": "/GCE_TP_Galaxy/#6-select-the-top-menu-images-personnalisees-custom-images", 
            "text": "", 
            "title": "6. Select the top menu images personnalis\u00e9es (custom images)"
        }, 
        {
            "location": "/GCE_TP_Galaxy/#7-click-on-the-rolling-menu-afficher-les-images-de-and-select-the-my-project-main-sunset-133416", 
            "text": "What is important here is the identifier  main-sunset-133416", 
            "title": "7. Click on the rolling menu Afficher les images de and select the My Project - main-sunset-133416"
        }, 
        {
            "location": "/GCE_TP_Galaxy/#8-check-the-button-to-select-galaxy-image-pasteur", 
            "text": "", 
            "title": "8. Check the button to select galaxy-image-pasteur"
        }, 
        {
            "location": "/GCE_TP_Galaxy/#9-at-the-bottom-of-the-same-form-choose-100-go-for-the-disk-size-taille-note-that-this-size-should-be-already-selected", 
            "text": "Click the  S\u00e9lectionner  button to leave the selection  Disque persistant standard  /  Standard persistant drive", 
            "title": "9. At the bottom of the same form, choose 100 Go for the Disk Size (Taille). Note that this size should be already selected."
        }, 
        {
            "location": "/GCE_TP_Galaxy/#10-back-to-the-main-form-click-authorize-http-traffic-autoriser-le-traffic-http", 
            "text": "", 
            "title": "10. Back to the main form, Click Authorize HTTP traffic / Autoriser le traffic HTTP"
        }, 
        {
            "location": "/GCE_TP_Galaxy/#11-click-creer-create", 
            "text": "", 
            "title": "11. Click Cr\u00e9er / Create"
        }, 
        {
            "location": "/GCE_TP_Galaxy/#12-after-1-minute-or-so-the-vm-turns-on-green-and-an-ssh-menu-becomes-selectable", 
            "text": "", 
            "title": "12. After ~1 minute or so, the VM turns on \"green\" and an ssh menu becomes selectable"
        }, 
        {
            "location": "/GCE_TP_Galaxy/#13-click-on-the-http-link-provided-in-the-adress-ip-externe-column", 
            "text": "You should now be able to access to your own Galaxy server instance, but not that this\nphase can take an additional minute or so, this is the time to start all the galaxy services\nin the new server instance.", 
            "title": "13. Click on the http link provided in the Adress IP externe column"
        }, 
        {
            "location": "/GCE_TP_Galaxy/#14-immediately-log-in-to-your-server-as-the-administrator", 
            "text": "And log in with  admin@galaxy.org  :  admin", 
            "title": "14. Immediately Log in to your server as the administrator"
        }, 
        {
            "location": "/GCE_TP_Galaxy/#you-are-ready-to-use-galaxy", 
            "text": "", 
            "title": "YOU ARE READY TO USE GALAXY !"
        }
    ]
}